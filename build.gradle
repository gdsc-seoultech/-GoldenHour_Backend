plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
}

group = 'com.gdsc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jar {
	enabled=false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	// h2-db
	runtimeOnly 'com.h2database:h2'

	// https://mvnrepository.com/artifact/com.mysql/mysql-connector-j
	implementation 'com.mysql:mysql-connector-j:8.0.32'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// https://mvnrepository.com/artifact/com.google.api-client/google-api-client
	implementation 'com.google.api-client:google-api-client:2.2.0'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

// jacoco setting
jacocoTestReport {

	dependsOn test // tests are required to run before generating the report

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"com/gdsc/goldenhour/common/*",
					"com/gdsc/goldenhour/disaster/*",
					"com/gdsc/goldenhour/guide/*",
					"com/gdsc/goldenhour/messageReport/*",
					"com/gdsc/goldenhour/GoldenhourApplication.class",
					"com/gdsc/goldenhour/user/dto/*"
			])
		}))

	}

	reports {
		html.enabled(true)
		xml.enabled(false)
		csv.enabled(false)

		//  html.destination file("$buildDir/jacocoHtml")
		//  xml.destination file("$buildDir/jacoco.xml")
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'METHOD'

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			excludes = []

		}
	}
}

